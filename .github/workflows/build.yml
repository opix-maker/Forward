name: Build IMDb Discovery Engine Data

on:
  workflow_dispatch: # 手动触发
  schedule:
    - cron: '0 */12 * * *' # 每 12 小时触发

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-build 
  cancel-in-progress: true

jobs:
  # =================================================================
  # JOB 1: 构建并打包产物
  # =================================================================
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache IMDb datasets
        uses: actions/cache@v4
        with:
          path: imdb-data-platform/datasets/
          key: ${{ runner.os }}-imdb-data-${{ hashFiles('**/package.json') }}

      - name: Install dependencies
        working-directory: ./imdb-data-platform
        run: npm install

      - name: Run build script
        working-directory: ./imdb-data-platform
        env:
          TMDB_ACCESS_TOKEN_V4: ${{ secrets.TMDB_ACCESS_TOKEN_V4 }} 
        run: npm run build 

      - name: Archive build artifacts
        run: |
          echo "Archiving the dist directory..."
          cd imdb-data-platform/dist
          tar -czf ../../dist.tar.gz .
          echo "✅ Artifacts archived to dist.tar.gz"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-data # 构件名称
          path: dist.tar.gz
          retention-days: 1

  # =================================================================
  # JOB 2: 从构件部署
  # =================================================================
  deploy:
    runs-on: ubuntu-latest
    needs: build # 依赖于 build 作业成功
    timeout-minutes: 90

    steps:
      # --- 1. 检出主仓库，以获得一个有效的 .git 目录 ---
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- 2. 下载构件 ---
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-data

      # --- 3. 准备部署分支 ---
      - name: Prepare deployment branch
        run: |
          git config user.name "GitHub Action (Deploy)"
          git config user.email "action@github.com"
          
          # 创建一个全新的、无历史的孤立分支
          git checkout --orphan data-deploy
          
          # 清理工作区，删除所有旧的主分支文件
          git rm -rf . --quiet
          echo "Switched to a clean, orphaned data-deploy branch."

      # --- 4. 提取构件到分支根目录 ---
      - name: Extract artifacts to branch root
        run: |
          echo "Listing directory contents to verify artifact path..."
          ls -l # 增加调试步骤，确认文件位置
          
          echo "Extracting artifacts..."
          # FIX: actions/download-artifact@v4 将单个文件的构件直接放在工作目录下
          # 因此，我们直接解压 dist.tar.gz，而不是 build-data/dist.tar.gz
          tar -xzf dist.tar.gz -C .
          echo "✅ Artifacts extracted."

      # --- 5. 分块提交和推送 ---
      - name: Commit and Push in Batches
        run: |
          echo "Staging and Committing files in batches of 5000..."
          
          # 查找所有文件，分批 add 和 commit
          find . -type f -print0 | xargs -0 -n 5000 sh -c '
            echo "Processing a batch of $# files..."
            git add --quiet -- "$@"
            git commit --quiet -m "Deploy: data batch"
          ' _
          
          echo "✅ All batches committed."
          
          # 检查是否有提交产生
          if git rev-parse HEAD >/dev/null 2>&1; then
            echo "Amending final commit message..."
            git commit --amend --quiet -m "Deploy: Automated data update"
            
            echo "Pushing changes to data-deploy..."
            git push --force origin data-deploy
            echo "✅ Deployment complete."
          else
            echo "No changes detected, nothing to push."
          fi
