name: Build IMDb Discovery Engine Data

on:
  workflow_dispatch: # 手动触发
  schedule:
    - cron: '0 */12 * * *' # 每 12 小时触发

permissions:
  contents: write # 部署到分支需要写权限

concurrency:
  group: ${{ github.workflow }}-build 
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      # --- 1. 检出代码 (主分支) ---
      - name: Checkout repository (main)
        uses: actions/checkout@v4
        with:
          path: main_repo # 将主分支检出到 main_repo 目录

      # --- 2. 设置环境和缓存 (跳过 API 请求) ---
      - name: Get current date for cache key (UTC)
        id: date
        run: echo "date=$(date -u +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache IMDb datasets and temp datalake
        id: cache-imdb-data
        uses: actions/cache@v4
        with:
          # 缓存路径现在需要指向 main_repo 内部
          path: |
            main_repo/imdb-data-platform/datasets/
            main_repo/imdb-data-platform/temp/
          key: ${{ runner.os }}-imdb-data-${{ steps.date.outputs.date }}
          restore-keys: |
            ${{ runner.os }}-imdb-data-

      # --- 3. 安装和构建 ---
      - name: Install dependencies
        working-directory: ./main_repo/imdb-data-platform
        run: npm install

      - name: Run build script
        working-directory: ./main_repo/imdb-data-platform
        env:
          TMDB_ACCESS_TOKEN_V4: ${{ secrets.TMDB_ACCESS_TOKEN_V4 }} 
        run: npm run build 
        # 16万个文件现在位于 main_repo/imdb-data-platform/dist/

      # --- 4. 清理磁盘空间 ---
      - name: Free up disk space
        run: |
          echo "Deleting intermediate files to save space..."
          rm -rf main_repo/imdb-data-platform/datasets
          rm -rf main_repo/imdb-data-platform/temp
          rm -rf main_repo/imdb-data-platform/node_modules

      # --- 5. 检出目标分支 ---
      - name: Checkout target branch (data-deploy)
        uses: actions/checkout@v4
        with:
          ref: data-deploy
          path: deployment_repo # 将目标分支检出到 deployment_repo 目录
          # 如果分支不存在，允许它是一个孤立分支
          fetch-depth: 0 

      # --- 6.使用 rsync 静默同步文件 ---
      - name: Synchronize files with rsync
        run: |
          echo "Starting efficient and quiet file sync using rsync..."
          # -a: 归档模式
          # --delete: 删除目标目录中源目录没有的文件（清理旧数据）
          # --quiet: 只报告错误
          # 源目录: main_repo/imdb-data-platform/dist/ (末尾斜杠很重要！)
          # 目标目录: deployment_repo/
          rsync -a --delete --quiet ./main_repo/imdb-data-platform/dist/ ./deployment_repo/
          echo "✅ Rsync complete."

      # --- 7. 提交和推送更改 ---
      - name: Commit and Push changes
        working-directory: ./deployment_repo # 在目标分支的目录中工作
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action (Rsync Deploy)"
          
          echo "Staging all changes (160k+ files)..."
          # 这仍然可能需要一些时间，但比 cp/rm 快
          git add . 

          # 检查是否有更改
          if git diff --staged --quiet; then
            echo "No changes detected, nothing to commit."
          else
            echo "Committing changes..."
            git commit -m "Deploy: Automated data update (${{ steps.date.outputs.date }})" --quiet
            echo "Pushing changes to data-deploy..."
            git push --force origin data-deploy --quiet
            echo "✅ Deployment push complete."
          fi

      # --- 8. 失败通知 ---
      - name: Notify on Failure
        if: failure() 
        run: echo "❌ Build workflow failed! Check logs."
