name: Build IMDb Discovery Engine Data

on:
  workflow_dispatch: 
  schedule:
    - cron: '0 */12 * * *' # 每 12 小时触发一次

permissions:
  contents: write 

# 并发控制
concurrency:
  group: ${{ github.workflow }}-build 
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      # --- 1-3. 设置环境和缓存  ---
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get current date for cache key (UTC)
        id: date
        run: echo "date=$(date -u +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache IMDb datasets and temp datalake
        uses: actions/cache@v4
        with:
          path: |
            imdb-data-platform/datasets/
            imdb-data-platform/temp/
          key: ${{ runner.os }}-imdb-data-${{ steps.date.outputs.date }}
          restore-keys: |
            ${{ runner.os }}-imdb-data-

      # --- 4-5. 安装依赖和构建  ---
      - name: Install dependencies
        working-directory: ./imdb-data-platform
        run: npm install

      - name: Run build script
        working-directory: ./imdb-data-platform
        env:
          TMDB_ACCESS_TOKEN_V4: ${{ secrets.TMDB_ACCESS_TOKEN_V4 }} 
        run: npm run build 
        # 脚本完成后，所有文件都在 imdb-data-platform/dist/ 中

      # --- 6. 分批部署  ---
      
      # --- 6.1. 准备暂存目录 ---
      - name: Prepare deployment staging area
        run: mkdir -p deployment_staging # 创建一个用于分批部署的临时目录

      # --- 6.2. 批次 1: 部署 'hot', 'movies' 和 'manifest.json'  ---
      - name: Stage Batch 1
        # 将第一批文件从 dist 移动到暂存目录
        run: |
          mv imdb-data-platform/dist/hot deployment_staging/
          mv imdb-data-platform/dist/movies deployment_staging/
          mv imdb-data-platform/dist/manifest.json deployment_staging/

      - name: Deploy Batch 1 (Clean Deploy)
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./deployment_staging # 部署暂存目录
          publish_branch: data-deploy
          commit_message: 'Deploy [Batch 1/3]: hot, movies, manifest - ${{ steps.date.outputs.date }}'
          keep_files: false 

      - name: Clear Staging for next batch
        run: rm -rf deployment_staging/* # 清空暂存目录，准备下一批

      # --- 6.3. 批次 2: 部署 'year' 和 'tvseries' ---
      - name: Stage Batch 2
        # 将第二批文件移动到暂存目录
        run: |
          mv imdb-data-platform/dist/year deployment_staging/
          mv imdb-data-platform/dist/tvseries deployment_staging/

      - name: Deploy Batch 2 (Append)
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./deployment_staging
          publish_branch: data-deploy
          commit_message: 'Deploy [Batch 2/3]: year, tvseries - ${{ steps.date.outputs.date }}'
          keep_files: true 

      - name: Clear Staging for next batch
        run: rm -rf deployment_staging/* # 再次清空暂存目录

      # --- 6.4. 批次 3: 部署 'tag' 和 'anime' ---
      - name: Stage Batch 3
        # 将第三批文件移动到暂存目录
        run: |
          mv imdb-data-platform/dist/tag deployment_staging/
          mv imdb-data-platform/dist/anime deployment_staging/
          # 如果还有其他遗漏的文件，也移动过来
          # mv imdb-data-platform/dist/* deployment_staging/ 

      - name: Deploy Batch 3 (Append)
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./deployment_staging
          publish_branch: data-deploy
          commit_message: 'Deploy [Batch 3/3]: tag, anime - ${{ steps.date.outputs.date }}'
          keep_files: true 

      # --- 7. 失败通知  ---
      - name: Notify on Failure
        if: failure() 
        run: echo "❌ Build workflow failed! Check logs."
